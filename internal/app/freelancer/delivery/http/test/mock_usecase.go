// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/freelancer/usecase.go

// Package mock_freelancer is a generated GoMock package.
package test

import (
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// FindByUser mocks base method
func (m *MockUsecase) FindByUser(user *model.User) (*model.Freelancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", user)
	ret0, _ := ret[0].(*model.Freelancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser
func (mr *MockUsecaseMockRecorder) FindByUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockUsecase)(nil).FindByUser), user)
}

// Find mocks base method
func (m *MockUsecase) Find(id int64) (*model.Freelancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*model.Freelancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUsecaseMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUsecase)(nil).Find), id)
}

// Edit mocks base method
func (m *MockUsecase) Edit(user *model.User, freelancer *model.Freelancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", user, freelancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit
func (mr *MockUsecaseMockRecorder) Edit(user, freelancer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUsecase)(nil).Edit), user, freelancer)
}
